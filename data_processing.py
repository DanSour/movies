import pandas as pd
from loguru import logger
import requests
import streamlit as st

logger.add('logs/data_processing/debug.log', rotation='100 MB', compression='zip', level='DEBUG')


def data_load():
    '''
    import streamlit as st
    from st_supabase_connection import SupabaseConnection

    # Initialize connection.
    conn = st.connection("supabase", type=SupabaseConnection)

    # Perform query.
    rows = conn.query("*", table="mytable", ttl="10m").execute()

    # Print results.
    for row in rows.data:
    st.write(f"{row['name']} has a :{row['pet']}:")
    '''
    return
def get_movie_type(movie_vars):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, –∞–Ω–∏–º–µ –∏ —Ç.–¥.) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤ –∏ —Ç–∏–ø–∞.

    :param movie_vars: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ (–∂–∞–Ω—Ä—ã, —Ç–∏–ø).
    :return: –¢–∏–ø –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞.
    """
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        genres = set((movie_vars.get('genres', '') or '').lower().split(', '))
        movie_type = movie_vars.get('type', '') # .upper()

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        type_mapping = {
            'FILM': '–§–∏–ª—å–º',
            'TV_SERIES': '–°–µ—Ä–∏–∞–ª',
            'MINI_SERIES': '–°–µ—Ä–∏–∞–ª'
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if '–∞–Ω–∏–º–µ' in genres:
            return '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª' if movie_type in ['TV_SERIES', 'MINI_SERIES'] else '–ú—É–ª—å—Ç'
        elif '–º—É–ª—å—Ç—Ñ–∏–ª—å–º' in genres:
            return '–ú—É–ª—å—Ç-—Å–µ—Ä–∏–∞–ª' if movie_type in ['TV_SERIES', 'MINI_SERIES'] else '–ú—É–ª—å—Ç'

        # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
        return type_mapping.get(movie_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')

    except AttributeError as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ get_movie_type: {e}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'


def data_preparation(mov_vars)  ->  pd.DataFrame: 
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç json –≤ pd.DataFrame

    :param mov_vars: json —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏.
    :return pd.DataFrame: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∫–∞–∫ DataFrame.
    """
    try:
        keys_to_keep = ["nameRu", "posterUrl", "year", "genres", "rating", "filmLength", "type"]
        mov_vars = {k: v for k, v in mov_vars.items() if k in keys_to_keep} 

        mov_vars['genres'] = ', '.join([item['genre'] for item in mov_vars['genres']])
        # mov_vars['posterUrl'] = f'<img src={mov_vars["posterUrl"]} alt="img" width="100" />'
        
        mov_vars['type'] = get_movie_type(mov_vars)
        
        mov_data = pd.DataFrame([mov_vars], columns=keys_to_keep)
        # mov_data = mov_data.to_markdown(index=False)
        # mov_data = mov_data.split('\n')[2:]
        # mov_data = mov_data[0]
        return mov_data
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ data_preparation: {e}')


def film_dict(film_name) -> dict:
    """
    –ë–µ—Ä–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Å —Å–∞–π—Ç–∞ –ò–ö–ù–û–ü–û–ò–°–ö

    :param film_name: str –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
    :return dict: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏.
    """
    url = f'https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword?keyword={film_name}'

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'X-API-KEY': st.secrets["API_KEY"],
        'Content-Type': 'application/json',
    }

    try:
        response = requests.get(url, headers=headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        if response.status_code == 200:
            film_data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
            # if film_data['films'] == []:            
            return film_data['films'][0] if film_data['films'] else None
                # return None
            # else:
                # film_data = film_data['films'][0]
            # return film_data
            # return film_data['films'][0]

        else:
            logger.error(f'–û—à–∏–±–∫–∞ film_dict: {response.status_code} - {response.text}')
            return None
    except Exception as e:
        # print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        st.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', icon="üö®")
        logger.error(f'–û—à–∏–±–∫–∞ film_dict: {e}')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV —Ñ–∞–π–ª
def add_film(new_mov, df):
    def save_data(df):
        df.to_csv("data/movies.csv", sep='\t', index=False)

    """
    –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—à–µ—Ç "–£–†–ê"

    Args:
        new_mov (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
    Returns:
    """
    try:
        # st.error('–ü–æ–¥–æ–∂–¥–∏, –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è', icon="üö®")
        mov_vars = film_dict(new_mov.lower())
        if mov_vars == None:
            st.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ', icon="üö®")
            logger.info(f'–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω add_film: {new_mov}')
            return
        
        mov_data = data_preparation(mov_vars)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DataFrame
        df = pd.concat([df, mov_data], ignore_index=True)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
        save_data(df)
        # –í–æ–∑–≤—Ä–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ DataFrame
        return df


    except Exception as e:
        st.error(f'This is an error: {e}', icon="üö®")
        logger.error(f'–û—à–∏–±–∫–∞ add_film: {e}')
    
        return
