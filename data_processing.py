import pandas as pd
import requests
import streamlit as st
from loguru import logger
from st_supabase_connection import SupabaseConnection, execute_query

logger.add(
    "logs/data_processing/debug.log",
    rotation="100 MB",
    compression="zip",
    level="DEBUG",
)


# Load the data from a SupabaseConnection. We're caching this so
# it doesn't reload every time the app
# reruns (e.g. if the user interacts with the widgets).
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    Returns:
        pd.DataFrame: —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ë–î
    """
    st_supabase_client = st.connection(
        name="SupabaseConnection",
        type=SupabaseConnection,
        ttl=10,
    )
    request = execute_query(st_supabase_client.table("movies").select("*"), ttl=0)

    return pd.DataFrame(request.data)


def filter_dataframe(df, selected_types, years):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –ª–µ—Ç.

    Args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame.
        selected_types (list): –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        years (tuple): –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç (min_year, max_year).

    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    try:
        year_filter = df["year"].between(years[0], years[1])
        if selected_types:
            type_filter = df["type"].isin(selected_types)
            return df[year_filter & type_filter]
        else:
            return df[year_filter]
    except KeyError:
        st.error("–ö–æ–ª–æ–Ω–∫–∞ 'type' –∏–ª–∏ 'year' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame.")
        return pd.DataFrame()


def get_movie_type(movie_vars):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, –∞–Ω–∏–º–µ –∏ —Ç.–¥.)
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤ –∏ —Ç–∏–ø–∞.

    Args:
        movie_vars (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ (–∂–∞–Ω—Ä—ã, —Ç–∏–ø).

    Returns:
        _type_: –¢–∏–ø –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞.
    """
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        genres = set((movie_vars.get("genres", "") or "").lower().split(", "))
        movie_type = movie_vars.get("type", "")

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        type_mapping = {
            "FILM": "–§–∏–ª—å–º", 
            "TV_SERIES": "–°–µ—Ä–∏–∞–ª", 
            "MINI_SERIES": "–°–µ—Ä–∏–∞–ª"
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if "–∞–Ω–∏–º–µ" in genres:
            return (
                "–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª"
                if movie_type in ["TV_SERIES", "MINI_SERIES"]
                else "–ú—É–ª—å—Ç"
            )
        elif "–º—É–ª—å—Ç—Ñ–∏–ª—å–º" in genres:
            return (
                "–ú—É–ª—å—Ç-—Å–µ—Ä–∏–∞–ª"
                if movie_type in ["TV_SERIES", "MINI_SERIES"]
                else "–ú—É–ª—å—Ç"
            )

        # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
        return type_mapping.get(movie_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

    except AttributeError as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ get_movie_type: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"


def data_preparation(mov_vars):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    Args:
        mov_vars (dict): —Å–ª–æ–≤–∞—Ä—å —Å –±–æ–ª—å—à–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏.

    Returns:
        dict: –ù—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏.
    """
    try:

        keys_to_keep = [
            "filmId",
            "nameRu",
            "posterUrl",
            "year",
            "genres",
            "rating",
            "filmLength",
            "type",
        ]
        mov_vars = {k: mov_vars.get(k, None) for k in keys_to_keep}

        mov_vars["name"] = mov_vars.pop("nameRu")

        mov_vars["genres"] = ", ".join([item["genre"] for item in mov_vars["genres"]])

        mov_vars["type"] = get_movie_type(mov_vars)
        mov_vars["url"] = f"https://www.kinopoisk.ru/film/{mov_vars.pop('filmId')}"

        return mov_vars

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ data_preparation: {e}, mov_vars")
        return mov_vars


def film_dict(film_name) -> dict:
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø–æ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞

    Args:
        film_name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.

    Returns:
        dict: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏.
    """
    url = "https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword"
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "X-API-KEY": st.secrets["API_KEY"],
        "Content-Type": "application/json",
    }
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {"keyword": film_name}  # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞

    try:
        response = requests.get(url, headers=headers, params=params, timeout=100)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        if response.status_code == 200:
            film_data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
            return film_data["films"][0] if film_data["films"] else None
        else:
            logger.error(f"–û—à–∏–±–∫–∞ film_dict: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        # print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        st.error("Film_dict error", icon="üö®")
        logger.error(f"–û—à–∏–±–∫–∞ film_dict: {e}")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV —Ñ–∞–π–ª
def add_film(new_mov):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–¥

    Args:
        new_mov (str): –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
    """
    try:
        st_supabase_client = st.connection(
            name="SupabaseConnection",
            type=SupabaseConnection,
            ttl=10,
        )

        mov_vars = film_dict(new_mov.lower())

        if mov_vars is None:
            execute_query(
                st_supabase_client.table("offered_movies").insert(
                    # {"name": new_mov.lower(), "img": None, "year": None}
                    {"name": new_mov.lower(), "posterUrl": "-"}
                ),
                ttl=0,
            )
            logger.warning(f"mov_vars is None, add_film: {new_mov}")
            return

        mov_data = data_preparation(mov_vars)
        # logger.debug(mov_data)
        if mov_data is None:
            execute_query(
                st_supabase_client.table("offered_movies").insert(
                    {
                        "name": new_mov.lower(),
                        "img": "img",
                    }
                ),
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {new_mov}")
        else:
            execute_query(
                st_supabase_client.table("offered_movies").insert(mov_data),
                # ttl=1
            )

    except Exception as e:
        error_msg = str(
            e
        ).lower()  # –ü—Ä–∏–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ 23505 –∏–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if "23505" in error_msg or "duplicate key" in error_msg:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç: {e} {new_mov}")
        else:
            st.error(f"This is an error: {e}", icon="üö®")
            logger.error(f"–û—à–∏–±–∫–∞ add_film: {e}")
