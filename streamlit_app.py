import streamlit as st
from gotrue.errors import AuthApiError

from appearance import create_checkboxes, links_to_watch
from data_processing import (
    add_film,
    admin_access,
    authenticate,
    filter_dataframe,
    load_data,
    logger,
)

logger.add(
    "logs/data_processing/debug.log",
    rotation="100 MB",
    compression="zip",
    level="DEBUG",
)

# st.cache_data.clear()
# Show the page title and description.
st.set_page_config(
    page_title="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤",
    initial_sidebar_state="collapsed",
    page_icon="üé¨",
    menu_items={
        "About": "# This is an *extremely* cool app! \n\
                       –ö–∞–∫ –∂–µ —è –∑–∞–µ–±–∞–ª—Å—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å... \n\
–ß–µ–ª –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–æ —Å–¥–µ–ª–∞–ª - [DanSour](http://github.com/DanSour)"
    },
)


def main():
    st.title("üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    st.subheader(
        "–í–æ—Ç —Ç—É—Ç –∏ –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ –º—ã –±—É–¥–µ–º —Å–µ–≥–æ–¥–Ω—è —Å–º–æ—Ç—Ä–µ—Ç—å  ü§© üëÄ ",
        divider="violet",
    )
    st.write(
        ":violet-background[—ç—Ç–æ –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–µ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å...]"
    )
    df = load_data()

    if "disabled" not in st.session_state:
        st.session_state.disabled = False
    if "placeholder" not in st.session_state:
        st.session_state.placeholder = "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å"

    def on_change(admin=False):
        st.session_state.disabled = True
        st.session_state.placeholder = st.session_state.new_mov
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if st.session_state.new_mov.lower() not in ["—Ö—É–π", "–ø–µ–Ω–∏—Å", "–ø–∏–∑–¥–∞"]:
            add_film(st.session_state.new_mov, admin)
        else:
            pass

    def enable_input():
        st.session_state.disabled = False
        st.session_state.placeholder = "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å"

    st.text_input(
        "—Ç–µ–∫—Å—Ç",
        label_visibility="collapsed",
        placeholder=st.session_state.placeholder,
        key="new_mov",
        on_change=on_change,
        disabled=st.session_state.disabled,
    )
    # –≤–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
    if st.session_state.disabled:
        if st.session_state.placeholder.lower() in ["—Ö—É–π", "–ø–µ–Ω–∏—Å", "–ø–∏–∑–¥–∞"]:
            st.error(
                f"–°–µ–±–µ {st.session_state.placeholder} –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π, –∫–ª–æ—É–Ω üëäüò°",
                icon="ü§°",
            )
        else:
            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!!", icon="‚úÖ")
            st.button(
                "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ",
                on_click=enable_input,
                disabled=not st.session_state.disabled,
            )

    col1, col2 = st.columns(2)
    selected_types = create_checkboxes(col1, col2)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
    years = st.slider("–ì–æ–¥—ã", min_value=1950, max_value=2030, value=(1954, 2010))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame
    df_filtered = filter_dataframe(df, selected_types, years)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∂–∞–Ω—Ä–æ–≤ –≤ –æ–¥–∏–Ω,
    # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
    # –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
    unique_genres = {
        genre for sublist in df_filtered["genres"] for genre in sublist.split(", ")
    } - {"–∞–Ω–∏–º–µ", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"}

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å unique_genres –≤ multiselect
    genres = st.multiselect(
        "genres",
        sorted(unique_genres),
        placeholder="–ñ–∞–Ω—Ä—ã",
        label_visibility="collapsed",
    )

    if genres:
        df_filtered = df_filtered[
            df_filtered["genres"].apply(
                lambda x: all(genre in x.split(", ") for genre in genres)
            )
        ]

    st.write("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–µ—Ä - :red[–¥–≤–∞–∂–¥—ã] –Ω–∞ –Ω–µ–≥–æ –Ω–∞–∂–º–∞–π")

    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ st.dataframe
    st.dataframe(
        df_filtered,
        use_container_width=True,
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
        column_config={
            "name": st.column_config.TextColumn(
                "–ù–∞–∑–≤–∞–Ω–∏–µ",
                width="medium",
            ),
            "posterUrl": st.column_config.ImageColumn(
                "–ü–æ—Å—Ç–µ—Ä",
            ),
            "year": st.column_config.NumberColumn(
                "–ì–æ–¥",
                format="%d",
            ),
            "genres": st.column_config.ListColumn(
                "–ñ–∞–Ω—Ä—ã",
                width="medium",
            ),
            "rating": st.column_config.NumberColumn(
                "–†–µ–π—Ç–∏–Ω–≥",
                # width ='small',
                help="–†–µ–π—Ç –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É",
            ),
            "length": st.column_config.TimeColumn(
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                format="HH:mm",
            ),
            # width ='small',
            "type": st.column_config.TextColumn(
                "–§–æ—Ä–º–∞—Ç",
            ),
        },
        hide_index=True,
    )

    st.button("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", key="wherewatch")
    placeholder = st.empty()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "displayed_text" not in st.session_state:
        st.session_state.displayed_text = ""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
    if st.session_state.displayed_text:
        placeholder.markdown(st.session_state.displayed_text)

    if st.session_state.wherewatch:
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        st.session_state.displayed_text = ""
        placeholder.empty()

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤–≤–æ–¥–∞
        st.session_state.displayed_text = links_to_watch(placeholder)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    with st.sidebar:

        def admin_add_film():
            admin_access(
                movie=mov,
                st_supabase_client=st.session_state.auth["client"],
                key_word=key_word,
            )

        if "admin" not in st.session_state:
            st.session_state.admin = False

        with st.form("my_form"):
            username = st.text_input(
                "Username",
                label_visibility="collapsed",
                placeholder="admin_login",
            )
            password = st.text_input(
                "pswd",
                type="password",
                label_visibility="collapsed",
                placeholder="password",
            )

            if st.form_submit_button("Submit"):
                st.session_state.auth = authenticate(username, password)
                if st.session_state.auth["response"]:
                    st.session_state.admin = True
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
        if st.session_state.admin:

            key_word = st.segmented_control(
                "Func", ["insert", "delete"], selection_mode="single", default="insert"
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
            mov = st.text_input(
                "¬†", label_visibility="collapsed", on_change=admin_add_film
            )


if __name__ == "__main__":
    try:
        main()
    except ValueError as ve:
        logger.error(f"–û—à–∏–±–∫–∞ ValueError –≤ main: {ve}")
    except TypeError as te:
        logger.error(f"–û—à–∏–±–∫–∞ TypeError –≤ main: {te}")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # except SomeSpecificException as se:
    #     logger.error(f"–û—à–∏–±–∫–∞ SomeSpecificException –≤ main: {se}")
    except AuthApiError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        st.sidebar.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùå")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

# streamlit run streamlit_app.py
# --server.enableCORS false --server.enableXsrfProtection false
