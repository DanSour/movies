import streamlit as st
import pandas as pd
from search_keywords import *
from data_processing import *
from appearance import *
from st_supabase_connection import SupabaseConnection


logger.add('logs/data_processing/debug.log', rotation='100 MB', compression='zip', level='DEBUG')

st.cache_data.clear()
# Show the page title and description.
st.set_page_config(page_title="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", 
                   page_icon="üé¨", 
                   menu_items={
                       'About': "# This is an *extremely* cool app! \n\
                       –ö–∞–∫ –∂–µ —è –∑–∞–µ–±–∞–ª—Å—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å... \n\
–ß–µ–ª –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–æ —Å–¥–µ–ª–∞–ª - [DanSour](http://github.com/DanSour)"
                   }
                )

# Load the data from a CSV. We're caching this so it doesn't reload every time the app
# reruns (e.g. if the user interacts with the widgets).
@st.cache_data
def load_data():
    df = pd.read_csv("data/movies.csv", sep='\t')
    # 

    return df

def main():
    st.title("üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    st.subheader("–í–æ—Ç —Ç—É—Ç –∏ –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ –º—ã –±—É–¥–µ–º —Å–µ–≥–æ–¥–Ω—è —Å–º–æ—Ç—Ä–µ—Ç—å  ü§© üëÄ ", divider='violet')
    st.write(":violet-background[—ç—Ç–æ –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å...]")

    df = load_data()


    if "disabled" not in st.session_state:
        st.session_state.disabled = False
        # st.session_state.new_mov = ""
    if 'placeholder' not in st.session_state:
        st.session_state.placeholder = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å'

    def on_change():
        st.session_state.disabled = True
        st.session_state.placeholder = st.session_state.new_mov
        # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        # add_film(st.session_state.new_mov)
        # updated_df = add_film(st.session_state.new_mov, df)

    def enable_input():
        st.session_state.disabled = False
        st.session_state.placeholder = '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å'

    st.text_input(
        "—Ç–µ–∫—Å—Ç",
        label_visibility='collapsed',
        placeholder=st.session_state.placeholder,
        key="new_mov",
        on_change=on_change,
        disabled=st.session_state.disabled
    )
    # –≤–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
    if st.session_state.disabled:
        if st.session_state.placeholder.lower() in ['—Ö—É–π', '–ø–µ–Ω–∏—Å']:
            st.error(f'–°–µ–±–µ {st.session_state.placeholder} –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π, –∫–ª–æ—É–Ω üëäüò°', icon="ü§°")
        else:
            # st.info('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!!!')
            st.success('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!!', icon="‚úÖ")
            st.button("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ", on_click=enable_input, disabled=not st.session_state.disabled)


    col1, col2 = st.columns(2)
    selected_types = create_checkboxes(col1, col2)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
    years = st.slider("–ì–æ–¥—ã", min_value=1950, max_value=2030, value=(1954, 2010))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame
    df_filtered = filter_dataframe(df, selected_types, years)


    st.write('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–µ—Ä - :red[–¥–≤–∞–∂–¥—ã] –Ω–∞ –Ω–µ–≥–æ –Ω–∞–∂–º–∞–π')

    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ st.dataframe
    st.dataframe(
        df_filtered,
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
        column_config={
            "name": st.column_config.TextColumn(
                "–ù–∞–∑–≤–∞–Ω–∏–µ", 
                width='medium',
            ),
            "img": st.column_config.ImageColumn(
                '–ü–æ—Å—Ç–µ—Ä', 
            ),
            "year": st.column_config.NumberColumn(
                '–ì–æ–¥', 
                format="%d",
            ),
            'genres': st.column_config.ListColumn(
                '–ñ–∞–Ω—Ä—ã',
                width='medium',
            ),
            "rating": st.column_config.NumberColumn(
                '–†–µ–π—Ç–∏–Ω–≥', 
                # width ='small',
                help='–†–µ–π—Ç –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É',
            ),
            "length": st.column_config.TimeColumn(
                "–î–ª–∏–Ω–∞",
                format='HH:mm',
            ),
                # width ='small',
            "type": st.column_config.TextColumn(
                "–§–æ—Ä–º–∞—Ç", 
            ),
        },
        hide_index=True,
    )


    st.button("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", key='wherewatch')
    placeholder = st.empty()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'displayed_text' not in st.session_state:
        st.session_state.displayed_text = ''

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
    if st.session_state.displayed_text:
        placeholder.markdown(st.session_state.displayed_text)

    if st.session_state.wherewatch:
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        st.session_state.displayed_text = ''
        placeholder.empty()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤–≤–æ–¥–∞
        st.session_state.displayed_text = links_to_watch(placeholder)


if __name__=='__main__':
    try:
        main()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")

# streamlit run streamlit_app.py --server.enableCORS false --server.enableXsrfProtection false
