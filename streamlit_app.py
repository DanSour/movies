import streamlit as st
import pandas as pd
from search_keywords import film_json
from data_preparation import *
from appearance import *

st.cache_data.clear()
# Show the page title and description.
st.set_page_config(page_title="–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", 
                   page_icon="üé¨", 
                   menu_items={
                       'About': "# This is an *extremely* cool app! \n\
                       –ö–∞–∫ –∂–µ —è –∑–∞–µ–±–∞–ª—Å—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å..."
                   }
                )

# Load the data from a CSV. We're caching this so it doesn't reload every time the app
# reruns (e.g. if the user interacts with the widgets).
# @st.cache_data
def load_data():
    # df = pd.read_csv("data/movies_genres_summary.csv")
    df = pd.read_csv("data/movies.csv", sep='\t')
    # df['img'] = df['img'].apply(lambda x: st.markdown(
        # x, f"[![Click me]({x})]", unsafe_allow_html=False,
    # )
    # df['img'] = df['img'].apply(
    #     lambda x: f'{x.split("src=")[1].split(" ")[0].strip("<>")}'
    # )
    # df['img'] = df['img'].apply(lambda x: st.image(x, width=10, use_container_width=True))

    return df


st.title("üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
# st.subheader("üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ", divider='blue')
st.subheader("–í–æ—Ç —Ç—É—Ç –∏ –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ –º—ã –±—É–¥–µ–º —Å–µ–≥–æ–¥–Ω—è —Å–º–æ—Ç—Ä–µ—Ç—å  ü§© üëÄ ", divider='violet')
st.write(":violet-background[—ç—Ç–æ –≤—Å–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å...]")
df = load_data()

st.text_input("New-mov", label_visibility='collapsed', placeholder='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π', key='new_mov')
if st.session_state.new_mov:
    try:
        st.error('–ü–æ–¥–æ–∂–¥–∏, –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è', icon="üö®")
        # mov_vars = film_json(st.session_state.new_mov.lower())
        # if mov_vars == None:
# –Ω–∞–¥–æ –±—É–¥–µ—Ç –≥–¥–µ —Ç–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —ç—Ä—Ä–æ—Ä –∏–ª–∏ —Ç—É—Ç
            # st.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ', icon="üö®")

        # mov_data = movie_preparation(mov_vars)
        # st.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', icon="‚úÖ")
        # st.write(mov_data)

        # st.write(st.session_state.new_mov)
    except Exception as e:
        st.error(f'This is an error: {e}', icon="üö®")

col1, col2 = st.columns(2)
selected_types = create_checkboxes(col1, col2)
# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
years = st.slider("–ì–æ–¥—ã", min_value=1950, max_value=2030, value=(1954, 2010))
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame
df_filtered = filter_dataframe(df, selected_types, years)
st.write('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–µ—Ä - :red[–¥–≤–∞–∂–¥—ã] –Ω–∞ –Ω–µ–≥–æ –Ω–∞–∂–º–∞–π')
# Display the data as a table using `st.dataframe`.
st.dataframe(
    df_filtered,
    column_config={
        "name": st.column_config.TextColumn(
            "–ù–∞–∑–≤–∞–Ω–∏–µ", 
            width='medium',
        ),
        "img": st.column_config.ImageColumn(
            '–ü–æ—Å—Ç–µ—Ä', 
        ),
        "year": st.column_config.NumberColumn(
            '–ì–æ–¥', 
            format="%d",
        ),
        'genres': st.column_config.ListColumn(
            '–ñ–∞–Ω—Ä—ã',
            width='medium',
        ),
        "rating": st.column_config.NumberColumn(
            '–†–µ–π—Ç–∏–Ω–≥', 
            # width ='small',
            help='–†–µ–π—Ç –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫—É',
        ),
        "length": st.column_config.TimeColumn(
            "–î–ª–∏–Ω–∞",
            format='HH:mm',
        ),
            # width ='small',
        "type": st.column_config.TextColumn(
            "–§–æ—Ä–º–∞—Ç", 
        ),
    },
    hide_index=True,
)

df_html = pd.read_csv("data/movies_html.csv", sep='\t')
df_filtered_html = filter_dataframe(df_html, selected_types, years)
st.write(df_filtered_html.to_html(escape=False, index=False), unsafe_allow_html=True)

# def stream_data():
#     import time

#     text = '''
#     [reyohoho.github.io/reyohoho]('reyohoho.github.io/reyohoho')\n
#     [reyohoho.serv00.net]('reyohoho.serv00.net')\n
#     [reyohoho.vercel.app]('reyohoho.vercel.app')\n
#     [reyohoho.surge.sh]('reyohoho.surge.sh')\n
#     '''
#     sleep = .03
#     for char in text:
#         if char == '(':
#             sleep = 0
#         elif char == '[':
#             sleep = 0.03
#         yield char + ""
#         time.sleep(sleep)
    
# # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ md
# if st.button("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"):
#     st.write_stream(stream_data)
import streamlit as st
import time

def stream_data():
    text = '''
    [reyohoho.github.io/reyohoho](https://reyohoho.github.io/reyohoho) \n
    [reyohoho.serv00.net](https://reyohoho.serv00.net) \n
    [reyohoho.vercel.app](https://reyohoho.vercel.app) \n
    [reyohoho.surge.sh](https://reyohoho.surge.sh) \n
    '''
    return text

if st.button("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"):
    sleep = 0.03
# if st.button("–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", key="unique_key"):
    placeholder = st.empty()
    full_text = ""
    for char in stream_data():
        if char == '(':
            sleep = 0
        elif char == '[':
            sleep = 0.03

        full_text += char
        placeholder.markdown(full_text)
        time.sleep(sleep)

# streamlit run streamlit_app.py --server.enableCORS false --server.enableXsrfProtection false